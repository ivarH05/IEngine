#pragma once

#define EXPAND(x) x

#define FOR_EACH_1(FUNC, A) FUNC(A)
#define FOR_EACH_2(FUNC, A, ...) FUNC(A) EXPAND(FOR_EACH_1(FUNC, __VA_ARGS__))
#define FOR_EACH_3(FUNC, A, ...) FUNC(A) EXPAND(FOR_EACH_2(FUNC, __VA_ARGS__))
#define FOR_EACH_4(FUNC, A, ...) FUNC(A) EXPAND(FOR_EACH_3(FUNC, __VA_ARGS__))
#define FOR_EACH_5(FUNC, A, ...) FUNC(A) EXPAND(FOR_EACH_4(FUNC, __VA_ARGS__))
#define FOR_EACH_6(FUNC, A, ...) FUNC(A) EXPAND(FOR_EACH_5(FUNC, __VA_ARGS__))
#define FOR_EACH_7(FUNC, A, ...) FUNC(A) EXPAND(FOR_EACH_6(FUNC, __VA_ARGS__))
#define FOR_EACH_8(FUNC, A, ...) FUNC(A) EXPAND(FOR_EACH_7(FUNC, __VA_ARGS__))
#define FOR_EACH_9(FUNC, A, ...) FUNC(A) EXPAND(FOR_EACH_8(FUNC, __VA_ARGS__))
#define FOR_EACH_10(FUNC, A, ...) FUNC(A) EXPAND(FOR_EACH_9(FUNC, __VA_ARGS__))
#define FOR_EACH_11(FUNC, A, ...) FUNC(A) EXPAND(FOR_EACH_10(FUNC, __VA_ARGS__))
#define FOR_EACH_12(FUNC, A, ...) FUNC(A) EXPAND(FOR_EACH_11(FUNC, __VA_ARGS__))
#define FOR_EACH_13(FUNC, A, ...) FUNC(A) EXPAND(FOR_EACH_12(FUNC, __VA_ARGS__))
#define FOR_EACH_14(FUNC, A, ...) FUNC(A) EXPAND(FOR_EACH_13(FUNC, __VA_ARGS__))
#define FOR_EACH_15(FUNC, A, ...) FUNC(A) EXPAND(FOR_EACH_14(FUNC, __VA_ARGS__))
#define FOR_EACH_16(FUNC, A, ...) FUNC(A) EXPAND(FOR_EACH_15(FUNC, __VA_ARGS__))
#define FOR_EACH_17(FUNC, A, ...) FUNC(A) EXPAND(FOR_EACH_16(FUNC, __VA_ARGS__))
#define FOR_EACH_18(FUNC, A, ...) FUNC(A) EXPAND(FOR_EACH_17(FUNC, __VA_ARGS__))
#define FOR_EACH_19(FUNC, A, ...) FUNC(A) EXPAND(FOR_EACH_18(FUNC, __VA_ARGS__))
#define FOR_EACH_20(FUNC, A, ...) FUNC(A) EXPAND(FOR_EACH_19(FUNC, __VA_ARGS__))
#define FOR_EACH_21(FUNC, A, ...) FUNC(A) EXPAND(FOR_EACH_20(FUNC, __VA_ARGS__))
#define FOR_EACH_22(FUNC, A, ...) FUNC(A) EXPAND(FOR_EACH_21(FUNC, __VA_ARGS__))
#define FOR_EACH_23(FUNC, A, ...) FUNC(A) EXPAND(FOR_EACH_22(FUNC, __VA_ARGS__))
#define FOR_EACH_24(FUNC, A, ...) FUNC(A) EXPAND(FOR_EACH_23(FUNC, __VA_ARGS__))
#define FOR_EACH_25(FUNC, A, ...) FUNC(A) EXPAND(FOR_EACH_24(FUNC, __VA_ARGS__))
#define FOR_EACH_26(FUNC, A, ...) FUNC(A) EXPAND(FOR_EACH_25(FUNC, __VA_ARGS__))
#define FOR_EACH_27(FUNC, A, ...) FUNC(A) EXPAND(FOR_EACH_26(FUNC, __VA_ARGS__))
#define FOR_EACH_28(FUNC, A, ...) FUNC(A) EXPAND(FOR_EACH_27(FUNC, __VA_ARGS__))
#define FOR_EACH_29(FUNC, A, ...) FUNC(A) EXPAND(FOR_EACH_28(FUNC, __VA_ARGS__))
#define FOR_EACH_30(FUNC, A, ...) FUNC(A) EXPAND(FOR_EACH_29(FUNC, __VA_ARGS__))
#define FOR_EACH_31(FUNC, A, ...) FUNC(A) EXPAND(FOR_EACH_30(FUNC, __VA_ARGS__))
#define FOR_EACH_32(FUNC, A, ...) FUNC(A) EXPAND(FOR_EACH_31(FUNC, __VA_ARGS__))

#define COUNT_ARGUMENTS(...) \
         COUNT_ARGUMENTS_IMPL(__VA_ARGS__, REVERSE_SEQUENCE())

#define COUNT_ARGUMENTS_IMPL(...) \
         COUNT_ARGUMENTS_EXTRACT_N(__VA_ARGS__)

#define COUNT_ARGUMENTS_EXTRACT_N( \
          ARG1,  ARG2,  ARG3,  ARG4,  ARG5,  ARG6,  ARG7,  ARG8,  ARG9, ARG10, \
         ARG11, ARG12, ARG13, ARG14, ARG15, ARG16, ARG17, ARG18, ARG19, ARG20, \
         ARG21, ARG22, ARG23, ARG24, ARG25, ARG26, ARG27, ARG28, ARG29, ARG30, \
         ARG31, ARG32, ARG_COUNT, ...) ARG_COUNT

#define REVERSE_SEQUENCE() \
         32,31,30,29,28,27,26,25,24,23, \
         22,21,20,19,18,17,16,15,14,13, \
         12,11,10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0

#define CONCATENATE_TOKENS(token1, token2) CONCATENATE_TOKENS_IMPL(token1, token2)
#define CONCATENATE_TOKENS_IMPL(token1, token2) token1##token2

#define FOREACH(function_macro, ...) \
    EXPAND(CONCATENATE_TOKENS(FOR_EACH_, COUNT_ARGUMENTS(__VA_ARGS__))(function_macro, __VA_ARGS__))

